# 이 파일은 MariaDB 10.5.8 x86_64 기준으로 작성되었습니다.
# https://mariadb.com/kb/en/server-system-variables/ 를 참조 하였습니다.
# 저장소에서 구하실 수 있습니다. https://github.com/HyunSeungBum/sbhyun_config.git
# cd /opt
# chown root:mariadb -R mariadb-10.5.8; cd mariadb-10.5.8
# mkdir run; chown mariadb:mariadb run
# mkdir -p /opt/dbstorage/{logs,maria,tmp,InnoDB/redoLogs,InnoDB/undoLogs,binlog,relaybin}
# chown mariadb:mariadb -R /opt/dbstorage

##--------------------------------------------------------------------
# Options read by all MariaDB client programs and the MariaDB Server. 
# This is useful for options like socket and port, which is common between the server and the clients.
##--------------------------------------------------------------------
[client-server]

# 서버 포트 지정.
port = 3306
# 서버 소켓 지정.
socket  = /opt/mariadb/run/mariadb.sock

##--------------------------------------------------------------------
# mariadbd 의 기본 설정들.
##--------------------------------------------------------------------
[mariadb]
# HuagePage memory 사용 설정.
large-pages

# 서버를 구동할 시스템 사용자 지정.
user = mariadb

# Pid 파일 경로
pid-file = /opt/mariadb/run/mariadb.pid

# Mariadb 기본 디렉토리
basedir = /opt/mariadb
# Mariadb 시스템 테이블을 위한 디렉토리
# 이 디렉토리의 소유권과 그룹은 user 에서 지정한 사용자와 그룹이어야 한다.
datadir = /opt/dbstorage/maria
# 임시 디렉토리
# 이 디렉토리는 Mysql 서버가 내부적 작업을 할때 임시로 사용하게 된다.
# 예를들어 대량의 select 처리를 위해서 임시 테이블을 만들거나 할 경우에 여기에 임시로 파일이 생성될 수 있다.
tmpdir  = /opt/dbstorage/tmp


# 문자셋 지정
character_set_server = utf8
collation_server = utf8_general_ci

# 타임존 설정.
# UTC 는 '+0:00' 라고 해야 한다.
# 'Asia/Seoul' 은 더 이상 인식이 안되며 '+9:00' 으로 해야 한다.
default_time_zone='+9:00'

# 기본 스토리지 엔진.
# MySQL 서버가 지원하는 스토리지 엔진중에 하나를 선택할 수 있다.
# 서버가 지원하는 스토리지 엔진은 'SHOW ENGINES' 명령어를 이용해 확인 가능하다.
default-storage-engine  = InnoDB

# 트랜잭션 레벨을 지정합니다.
# 레코드 기반 Replication 을 할려면 READ-COMMITED
# 기본 값으로 REPEATABLE-READ 사용.
transaction-isolation = REPEATABLE-READ

##--------------------------------------------------------------------
# Network 설정.
##--------------------------------------------------------------------
# 서버 포트 지정.
port = 3306

# 서버에 접속한 클라이언트 확인을 위해서 IP를 가지고 클라이언트의 도메인을 찾는 것을 방지한다.
# 이것을 사용하면 서버에 접속가능한 클라이언트를 정의할때에 Host 필드에 도메인을 사용하면 않되며
# IP만 사용해야 한다. 대신 클라이언트의 도메인을 찾는 작업이 없기 때문에 성능상에 이점이 있다.
#skip-name-resolve

# MariaDB ThreadPool
thread_handling = pool-of-threads
# 쓰레드 풀에서 쓰레드 그룹의 갯수.
# 기본값은 시스템의 CPU 갯수다.
thread_pool_size = 3
# 쓰레드 풀에서 최대 쓰레드 갯수.
# 이 한계값에 도달하면 더 이상 새로운 쓰레드가 생성되지 않는다.
# MariaDB 10.2 이후에 기본값은 65536 이다.
thread_pool_max_threads = 1024
# idle worker 쓰레드가 종료되기전까지의 시간(초)
# 기본값은 60 초
thread_pool_idle_timeout = 10

# 최대 동시 접속 연결을 지정. 무턱대고 크게 잡을게 아니라 적절하게 잡아야 한다.
# 이 값을 초과하면 "Too many connections error" 메시지를 보여준다.
# Dynamic 설정을 할수 있다. SET GLOBAL max_connections = 300
max_connections = 30

# MySQL 서버에 접속하는 사용자 계정별 최대 동시접속 수. 기본값은 0(Unlimited) 이다.
# MariaDB 에서는 autset 옵션을 활용할 수 있다.
# Dynamic 설정을 할수 있다. SET GLOBAL max_user_connections = 1024
max_user_connections = 0

# MySQL 서버에 접속한 클라이언트들은 다양한 에러를 발생시킨다. 서버는 이러한 클라이언트별 오류 갯수를 카운팅해 놓는데,
# 만일 클라이언트가 일정한 카운팅을 넘어서면 서버는 클라이언트의 접속을 차단한다.
# 클라이언트가 발생시킬 수 있는 에러의 한계치를 조정하기 위한 설정이다. 기본 값은 10 이다.
# 이 카운터에 도달하면 "Host [client] is blocked because of many connection errors" 에러를 발생시킨다.
# Dynamic 설정을 할수 있다. SET GLOBAL max_connect_errors = 1000000
# 이 카운터의 초기화는 FLUSH HOSTS 해주면 된다.
max_connect_errors = 1000000

# 접속한 클라이언트가 아무런 일을 하지 않을 경우에 차단할 시간. 단위는 초이며 기본값은 28800초(8시간)이다.
# 웹에 붙여서 사용할 경우에 대부분의 30초 내외로 웹서버의 커넥션 타임이 정해져 있기 때문에 기본값은 매우 큰 값이라고 할 수 있다.
# Dynamic 설정을 할수 있다. SET GLOBAL wait_timeout = 600
wait_timeout = 60

# 비활성 상태에서 활성상태가 될때까지 대기시간.(seconds to waits for activity on interactive connection)
# 이것은 오직 MySQL API 중에 mysql_real_connect() 함수를 사용하는 애플리케이션에만 적용된다. 단위는 초이며 기본값은 600 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL interactive_timeout = 600
interactive_timeout = 60

# 'Bad handshake'로 응답하기전 패킷접속을 기달리는 시간.
# "Lost connection to MySQL server at 'XXX', system error: errno" 메시지가 자주 보인다면 이 값을 증가시켜줄 필요가 있다.
# 단위는 초, 기본값은 10 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL connect_timeout = 10
connect_timeout = 10

# 클라이언트에서 서버로 보내는 쿼리는 단 한개의 패킷으로 처리된다. 만일 서버로 보내는 쿼리의 크기가 이 값보다 작다면 늘려줘야 한다.
# 특히 테이블 컬럼에 BLOB 타입을 사용할 경우, 그림같은 바이너리 값, 이 값을 증가시켜줄 필요가 있다.
# 현재 max 값인 1G로 설정하여 최대한 제한이 없도록 한다.
# 패킷 메시지 버퍼는 처음에 net_buffer_length 로 초기화 되고 필요에 의해 max_allowd_packet 사이즈(bytes) 까지 늘어나게 된다. (large packet 이 들어오기 전까지는 작게 할당됨)
# [mysqld] 이외에도 [client] 의 설정도 동일하게 늘려줘야 한다. 필요하다면 [mysqldump] 에도 늘려준다.
# 단위는 byte, 기본값은 4194304(4MB) 이다. 한계값은 1GB 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL max_allowed_packet = 1048576
max_allowed_packet = 1073741824


##--------------------------------------------------------------------
# Bin Log and Replication
##--------------------------------------------------------------------

# 이 변수는 마스터와 슬레이브를 구분하기 위해서 MariaDB replication 사용된다.
# 또, 어느 서버에서 트랜잭션이 생성되었는지 구분하기 위해서 binary log 에서 사용되기도 한다.
# id 는 1 에서 2^32 -1 개 사이에 유일한 값이여 한다.
# server-id 는 복제 그룹을 구성할 경우에 중복된 값이여서는 않된다.
# 단일 시스템일 경우 기본값 1 이면 충분하다.
server_id = 1

# 자신의 binary log 에 마스터로부터 받은 annotate_rows_events 를 재생성하도록 Slave 에 말해준다.
# 이 옵션은 log_slave_update 옵션과 함께 사용할 때만 사용 가능하다.
# Dynamic 설정할 수 없다. 
# 기본값: ON (>= MariaDB 10.2.4), OFF (<= MariaDB 10.2.3)
replicate_annotate_row_events = ON

# 이 시스템 변수를 사용하면 지정된 이름과 일치하는 데이터베이스에 영향을 미치는 statement 와 
# transaction 을 적용하도록 replication slave 를 구성할 수 있다.
# Dynamic 설정을 할 수 있는데, 콤마(,) 로 구분되는 리스트롤 받는다.
# command-line 이나 서버 옵션으로 설정할때, 콤파(,)로 구분되는 리스트를 받지 않는다.
# 필터를 여러개 저정할려면 시스템 변수를 여러번 지정해야 한다.
# Dynamic 설정할 수 있다. SET GLOBAL replicate_do_db = abcd
# 기본값: ''(empty)
# replicate_do_db =

# 이 시스템 변수를 사용하면 지정된 이름과 일치하는 테이블에 영향을 미치는 statement 와 
# transaction 을 적용하도록 replication slave 를 구성할 수 있다.
# 테이블 이름 형식은 dbname.tablename 이다.
# Dynamic 설정을 할 수 있는데, 콤마(,) 로 구분되는 리스트롤 받는다.
# command-line 이나 서버 옵션으로 설정할때, 콤파(,)로 구분되는 리스트를 받지 않는다.
# 필터를 여러개 저정할려면 시스템 변수를 여러번 지정해야 한다.
# Dynamic 설정할 수 있다. SET GLOBAL replicate_do_table = abcd.efg
# 기본값: ''(empty)
# replicate_do_table = 

# 이 시스템 변수를 사용하면 지정된 이름과 일치하는 데이터베이스에 영향을 미치는 statement 와 
# transaction 을 무시하도록 replication slave 를 구성할 수 있다.
# Dynamic 설정을 할 수 있는데, 콤마(,) 로 구분되는 리스트롤 받는다.
# command-line 이나 서버 옵션으로 설정할때, 콤파(,)로 구분되는 리스트를 받지 않는다.
# 필터를 여러개 저정할려면 시스템 변수를 여러번 지정해야 한다.
# Dynamic 설정할 수 있다. SET GLOBAL replicate_ignore_db = abcd
# 기본값: ''(empty)
# replicate_ignore_db = 

# 이 시스템 변수를 사용하면 지정된 이름과 일치하는 테이블에 영향을 미치는 statement 와 
# transaction 을 무시하도록 replication slave 를 구성할 수 있다.
# 테이블 이름 형식은 dbname.tablename 이다.
# Dynamic 설정을 할 수 있는데, 콤마(,) 로 구분되는 리스트롤 받는다.
# command-line 이나 서버 옵션으로 설정할때, 콤파(,)로 구분되는 리스트를 받지 않는다.
# 필터를 여러개 저정할려면 시스템 변수를 여러번 지정해야 한다.
# Dynamic 설정할 수 있다. SET GLOBAL replicate_ignore_table = abcd.efg
# 기본값: ''(empty)
# replicate_ignore_table = 

# 이 시스템 변수를 사용하면 지정된 와일드카드 패턴과 일치하는 테이블에 영향을 미치는 statement 와 
# transaction 을 적용하도록 replication slave 를 구성할 수 있다.
# 와일드카드 패턴은 LIKE 연산자와 같은 문법을 사용한다.
# Dynamic 설정을 할 수 있는데, 콤마(,) 로 구분되는 리스트롤 받는다.
# command-line 이나 서버 옵션으로 설정할때, 콤파(,)로 구분되는 리스트를 받지 않는다.
# 필터를 여러개 저정할려면 시스템 변수를 여러번 지정해야 한다.
# Dynamic 설정할 수 있다. SET GLOBAL replicate_do_db = abcd
# 기본값: ''(empty)
# replicate_wild_do_table =

# 이 시스템 변수를 사용하면 지정된 와일드카드 패턴과 일치하는 테이블에 영향을 미치는 statement 와 
# transaction 을 적용하도록 replication slave 를 구성할 수 있다.
# 와일드카드 패턴은 LIKE 연산자와 같은 문법을 사용한다.
# Dynamic 설정을 할 수 있는데, 콤마(,) 로 구분되는 리스트롤 받는다.
# command-line 이나 서버 옵션으로 설정할때, 콤파(,)로 구분되는 리스트를 받지 않는다.
# 필터를 여러개 저정할려면 시스템 변수를 여러번 지정해야 한다.
# Dynamic 설정할 수 있다. SET GLOBAL replicate_do_db = abcd
# 기본값: ''(empty)
# replicate_wild_ignore_table = 

# row-based replication 을 사용할때에 슬레이브에 type 컨버전 모드를 결정한다. 
# 콤마(,)를 이용해서 여러 옵션을 지정할 수 있다. 
# ALL_NON_LOSSY 는 데이터 손실 없이 안전한 변환을 허용한다.
# ALL_LOSSY 는 손실 변환을 허용한다.
# 기본값: Empty
# Dynamic 설정을 할 수 있다. SET GLOBAL slave_type_conversions = ALL_NON_LOSSY
slave_type_conversions = ALL_NON_LOSSY

# MariaDB 는 많은 이벤트 이후에 binary log 파일을 디스크로 동기화 한다. 
# 기본값 0 으로 운영체제가 파일을 디스크로 플러싱하는 것을 핸들링 한다.
# 1 은 안전하지만 매우 느리며 쓰기 이후에 파일은 플러쉬 된다.
# 만약 autocommit 이 활성화 했다면, 하나의 statement 당 하나의 쓰기지만 
# autocommit 이 비활성화되었다면 하나의 트랜잭션 당 하나의 쓰기다.
# 기본값은 1
# Dynamic 설정을 할수 있다. SET GLOBAL sync_binlog = 1
# sync_binlog = 1 나 enable_sync_binlog
enable_sync_binlog

# row-based, statement-based, mixed 중에서 선택 가능하다.
# Statement-based 는 MariaDB 10.2.3 까지 기본값이 였다.
# 이미 Replication 환경이 운영중일때 binary log 변경은 신중해야 한다.
# MariaDB 10.0.22부터는 binary log  형식에 관계없이 
# 슬레이브가 마스터에서 가져오는 모든 이벤트를 적용할 것이다.
# MariaDB 10.2.4 이후부터는 MiXED 기본값이다. 이전버전은 STATEMENT 다.
# Dynamic 설정을 할수 있다. SET GLOBAL binglog_format = ROW
binlog_format = ROW

# Binary logging 활성화.
# --log-bin 커맨드를 이용할 경우에는 파일경로와함께 파일명을 주어야 하며
# 커맨드를 이용하지 않을 경우에 log_bin 은 활성화/비활성 용도로 사용된다.
# --log-basename 옵션을 함게 사용하길 강력하게 권한다.
# 왜냐하면 기본적으로 호스트 이름을 파일명으로 사용하는데,
# 호스트명이 변경될 경우에 리플리케이션이 정지 될 수 있다.
# Dynamic 설정을 할 수 없다.
log_bin = /opt/dbstorage/binlog/localhost-01-bin

# 확장을 제외한 Binary Log 파일 이름의 전체 경로.
# 파일의 경로와 함께 파일명을 지정하면 된다.
# 기본값: datadir + '/' + hostname + '-bin'
# Dynamic 설정을 할수 없다.
#log_bin_basename = /opt/dbstorage/binlog/localhost-01-bin

# 마지막 빈 로그 파일의 이름을 보관하는 파일
log_bin_index=localhost-01-bin.index

# 슬레이브 쓰레드에서 실행된 느린 statement를, 만약 설정이 되었다면, 
# 슬로우 로그에 기록한다.
# 기본값: MariaDB 10.2.4 이후부턴 기본값 ON 이하는 OFF 다.
enable_log_slow_slave_statements

# 트랜잭션 중에 바이너리 로그를 변경하기 위한 캐쉬의 크기.
# per-connection 마다 할당 된다. 
# binary log 가 활성화 되어 있어야 한다.
# 단위: bytes
# 기본값: 32768
binlog_cache_size = 16777216

# binary log 가 활성화 됐다면 
# 트랜잰션 바깥에(non-transactional) 바이너리 로그를 변경하기 위한 캐수의 크기.
# binlog_cache_size 는 트랜잰션 내에(transactional) 바이너리 로그 명령문을 위한 캐쉬 크기를 결정한다.
# 단위: bytes
# 기본값: 32768
binlog_stmt_cache_size = 16777216

# binary log 를 자동으로 삭제하기 위한 보관 기간.
# 이 기간이 지나면 binary log 를 자동 삭제해 준다.
expire_logs_days = 90

# 다중 트랜잰션한 쿼리 캐쉬를 위해 사용될 크기를 제한.
# 만일 더 큰 크기가 필요하다면 
# Multi-statement transaction required more than 'max_binlog_cache_size' bytes of storage
# 에러가 발생된다.
# 단위: bytes
# 기본값: 18446744073709547520
max_binlog_cache_size = 1073741824

# 만일 binary log 가 이 크기를 초과하면 
# 즉각 파일을 닫고 새로운 binary log 를 열어 
# bianry log 를 로테이션 한다.
# 단위: bytes
# 기본값: 1073741824 (1GB)
# 범위: 4096 to 1073741824 (4KB to 1GB)
max_binlog_size = 1073741824

# non-transactional 명령문 캐쉬를 위한 크기 제한.
# 단위: bytes
# 기본값: 18446744073709547520 (64 bit), 4294963200 (32 bit)
max_binlog_stmt_cache_size = 1073741824

# 슬레이브에서 이 크기를 초과하면 relay log 가 로테이션 된다. 
# 만약 설정하지 않으면 max_binlog_size 세팅값이 대신 적용된다.
# 단위: bytes
# 기본값: 1073741824 (1GB)
# 범위: 4096 to 1073741824 (4KB to 1GB)
max_relay_log_size = 1073741824

##-----------
# Slave 를 위한 세팅
##-----------

# Relay log 의 이름. 
# 지정하지 않으면 hostname-relay-bin 이 사용된다.
# Dynamic 설정을 할 수 없다.
relay_log = /opt/dbstorage/relaybin/slave-01-relay-bin

# 확장자를 제외한 릴레이 로그 파일 이름의 전체 경로.
# 이 값은 릴레이 로그 변수에서 파생된다.
# Dynamic 설정을 할 수 없다.
#relay_log_basename = /opt/dbstorage/relaybin/slave-01-relay-bin

##--------------------------------------------------------------------
# Logging
##--------------------------------------------------------------------

# 제너럴 쿼리 로그(general query log)와 슬로우 쿼리 로그(slow query log)의 출력 목적지를 결정한다.
# 이 옵션은 다른 어떤 옵션들을 덮습니다. 이 값이 NONE 이라면 다른 옵션에서 로그기록을 설정했어도 로그는 기록되지 않습니다.
# Dynamic 설정을 할수 있다. SET GLOBAL log_output = FILE
log_output = FILE

# 에러나 시작 메시지 로그 파일을 지정.  
# 파일명을 지정하지 않을 경우 host_name.err 를 사용하며 확장자를 지정하지 않으면 .err 를 붙인다.
# 기본값은 없으며 Dynamic 설정을 할 수 없다.
log_error = /opt/dbstorage/logs/mariadb_error.log

# 제너럴 쿼리 로그(general query log) 의 사용 유무를 결정. log_output 값이 NONE 이라면 이 값은 무시됩니다.
# 기본값은 0(0)
# Dynamic 설정을 할수 있다. SET GLOBAL log_output = 0
general_log = 1

# 모든 쿼리를 로그로 기록하기위한 파일을 지정. 쿼리로그 혹은 제너럴 로그라고 한다.
# 파일명을 지정하지 않으면 host_name.log 가 된다.
# Dynamic 설정을 할수 있다. SET GLOBAL general_log_file = /usr/local/mariadb/logs/general_query_all.log
general_log_file = /opt/dbstorage/logs/general_query_all.log

# "OPTIMIZE TABLE, ANALYZE TABLE, and ALTER TABLE" 과 같은 관리명령에 대해서도 slow query 를 남길지 결정
# 기본값은 0
# Dynamic 설정이 아니다.
log_slow_admin_statements = 1

# 인덱스를 타지 않는 Full Scan 과 같은 쿼리에 대해서 로깅을 한다.
# 기본값 0
# Dynamic 설정을 할수 있다. SET GLOBAL log-queries-not-using-indexes = 1
log_queries_not_using_indexes = 1

# 슬로우 쿼리 로그를 기록할지 말지를 결정. log_output 값이 NONE 이라면 이 값은 무시됩니다.
# 기본값 0
# Dynamic 설정을 할수 있다. SET GLOBAL slow_query_log = 0
slow_query_log = 1

# 슬로우 쿼리를 기록할 시간을 지정. 이 시간보다 크면 기록된다.
# 기본값: 10.000000 >= MariaDB 10.1.13, 10 <= MariaDB 10.1.12
# Dynamic 설정을 할수 있다. SET GLOBAL long_query_time = 1
long_query_time = 2

# 슬로우 쿼리 로그 파일 지정.
# 로그 파일명을 명시하지 않으면 host_name-slow.log 로 됩니다.
# Dynamic 설정을 할수 있다. SET GLOBAL slow_query_log_file = /usr/local/mariadb/logs/slow_query.log
slow_query_log_file = /opt/dbstorage/logs/slow_query.log

##--------------------------------------------------------------------
# 캐쉬와 메모리
##--------------------------------------------------------------------
# 재사용을 위한 쓰레드를 서버가 얼마나 가지고 있어야 하는 지정하는 것.
# MariaDB 10.2.0 이나 그 이후버전 부터는 idle time 이 5분이 지나면 쓰레드는 해제된다.
# 캐쉬 미스(miss) 비율은 서버 통계 변수 threads_created/connections 로 계산할 수 있다. 
# 만약 thread pool 이 활성화 했다면, thread_cache_size 는 무시 된다. 
# 만약 thread_cache_size 가 max_connections 값보다 크게 설정되어 있다면 
# thread_cache_size 는 max_connections 값으로 세팅된다.
# 기본값은 256 (from MariaDB 10.2.0)
# Dynamic 설정을 할수 있다. SET GLOBAL thread_cache_size = 52
thread_cache_size = 52

# 하나의 테이블 캐쉬 인스턴스에 캐쉬할 수 있는 최대 오픈 테이블 수.
# table_open_cache 는 파일 디스크립터 갯수를 증가 시킨다.
# 기본값: 2000
# 범위: 1 to 1048576 (1024K) (>= MariaDB 10.1.20, MariaDB 10.0.35)
# Dynamic 설정을 할수 있다. SET GLOBAL table_open_cache = 400
table_open_cache = 2000

# 이 시스템 변수는 테이블 캐쉬 인스턴스 최대 갯수를 지정한다. 
# MariaDB 서버는 초기에 단 하나의 인스턴스를 생성한다.
# 그런데, 기존 인스턴스에 경합이 감지되면 자동으로 새로운 인스턴스가 생성된다. 
# 경합으로 인해 인스턴스 수가 증가하면 다신 줄어들지 않는다.
# 기본값 8은 100CPU 코어를 처리할 수 있다. 
# 기본값: 8
# 범위: 1 ~ 64
# Dynamic 설정할 수 없다. 
table_open_cache_instances = 2

# 사용자 생성 MEMORY 테이블을 위한 최대 크기.
# 이 변수는 서버가 동작중일때에 재생성하거나 변경(alter) 할때까지 이미 있는 테이블에 영향을 미치지 않는다. 
# 아주 작은 max_heap_table_size 나 tmp_table_size 는 내부 인메모리 테이블을 제한한다. 
# 최대 크기에 도달한 상태에서 더 데이터를 Insert 한다면, "table .. is full" 에러를 받을 것이다.
# CREATE TEMPORARY 로 생성한 임시 테이블도 Aria 로 바뀌지 않고 table full 에러를 받을 수 있다. 
# 단위는 byte. 기본값은 16777216(16MB) 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL max_heap_table_size = 16777216
max_heap_table_size = 33554432

# MEMORY 테이블이 아닌 메모리에 생성되어지는 임시 테이블 크기의 최대 값. 
# max_heap_table_size 가 아주 작더라도 메모리에 임시테이블을 위한 최대 값이 
# 하한값으로 적용 된다. 
# 테이블이 이 한계에 도달하면 MariaDB 는 MyISAM 이나 Aria 테이블로 변환된다.
# SHOW GLOBAL STATUS 에서 'Created_tmp_disk_tables' 와 'Created_tmp_tables'
# 상태 변수를 비교해 전체 테이블 중 Disk 로 변환해야 하는 임시 테이블 수를 확인할 수 있다.
# 가끔 복잡한 GROUP BY 쿼리는 한도를 초과하도록 한다.
# 쿼리에 GROUP By 가 많고 메모리가 충분하다면 이 값을 증가시킬 필요가 있다.
# 이 값은 사용자가 생성하는 Memory 테이블에는 영향을 주지 않는다.
# 단위는 Byte. 기본값은 시스템에 의존적이다.
# 기본값은 16777216 (16MB)
# Dynamic 설정을 할수 있다. SET GLOBAL tmp_table_size = 524288
tmp_table_size = 16777216

# 각 섹션이 정렬을 수행하기 위해 이 메모리 양을 가지는 버퍼를 할당한다.
# 이 값은 어떤 스토리지 엔진에서도 특화된것이 아니다.
# 만약 SHOW GLOBAL STAUS 에서 초당 'Sort_merge_passes' 값이 많이 보인다면 
# 쿼리를 개선하거나 인덱싱을 개선하거나 이 값을 늘려보는 것도 좋다.
# OLTP 와같이 많은 소규모 정렬은 줄이고 세션별로 필요한 경우 늘리는 것이 좋다.
# 단위는 Byte. 기본값은 2MB 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL sort_buffer_size = 2097144
sort_buffer_size = 2M

# MyISAM, Aria, MERGE 테이블에 대해서 각 쓰레드가 sequentail scan 을 할때에 이 값의 크기만큼 버퍼를 각각 할당한다.
# sequentail scan 이 자주 발생하면 이 값을 증가시킬 필요가 있다.
# 4Kb 의 배수로 설정해야 한다. 
# ORDERB BY에서 임시 파일의(임시 테이블이 아님) 캐싱 인덱스, nested 쿼리 결과 캐시,
# 파티션에 bulk insert 등에 사용되고 MEMORY 테이블의 메모리 블럭 크기를 결정하는데도
# 사용 된다.
# 단위는 Byte. 기본값은 131072 (128K) 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL read_buffer_size = 16777216
read_buffer_size = 131072

# MyISAM 테이블로부터 Key-sorting 정렬에 의한 데이터를 레코드에서 읽을때에 디스크에서 찾는것을 피하기 위해서 이 버퍼를 사용한다.
# GROUP BY, ORER BY 를 많이 사용한다면 이 값을 증가시키면 성능향상이 있을 수 있다.
# 또, 모든 스토리지 엔진에서 Multi-Range Read optimization 를 위해서 사용된다.
# 정렬이 발생했을 때 sort buffer에 있는 내용을 random buffer 로 가져와서 
# row pointer 순으로 정렬함으로써 디스크 row를 가져올 때 random I/O에서 sequential I/O로 변경해준다
# 따라서 MyISAM을 안 쓴다고 무시하면 안된다.
# 단위는 Byte. 기본값은 262144(256K) 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL read_rnd_buffer_size = 262144
read_rnd_buffer_size = 262144

# 인덱스를 사용할 수 없고 대신 풀테이블 스캔을 수행하는 쿼리에서 사용할 버퍼의 최소 크기.
# 메모리 문제를 알고 있더라도 인덱스를 추가할 수 없는 경우 조인시 항상 최소 크기가 할당되므로 
# 좀 더 빠른 조인 속도를 얻기 위해 이 값을 증가시켜라.
# 단위는 Byte.
# 기본값은 262144 (256kB) (>=MariaDB 10.1.7)
# Dynamic 설정을 할수 있다. SET GLOBAL join_buffer_size = 131072
join_buffer_size = 262144

# Rowid-merge 전략에서 사용할 최대 메모리 크기. Non-semi-join subquery optimizations 를 참조.
# 단위는 Byte
# 기본값은 8388608 
# Dynamic 설정을 할 수 있다. SET GLOBAL rowid_merge_buff_size = 8388608
rowid_merge_buff_size = 8388608


##--------------------------------------------------------------------
# Query Cache 에 관한 개관은 다음의 링크를 확인해야 한다.
# Query Cache (https://mariadb.com/kb/en/query-cache)
##--------------------------------------------------------------------

# 만약 0 이면 query_cache_size 버퍼가 할당되어 있다 하더라도
# query cache 가 비활성화 된다. 
# 만약 1 이면 SQL_NO_CACHE 지정하지 않는한 모든 SELECT 쿼리가 캐쉬된다.
# 만약 2 이면 SQL_CACHE 지정한 쿼리만 캐쉬된다.
# 서버 시작시에 query cache 가 비활성화 되었다면
# 런타임시에 이것을 활성화 할수 없다. 
# Warning: MariaDB 10.1.7 부터, query_cache_size 값이 0 값이 아니라면 
# query_cache_type 이 자동으로 ON 지정된다.
# 가능값: 0 or OFF, 1 or ON, 2 or DEMAND
# Dynamic 설정할 수 있다. SET GLOBAL query_cache_type = 1
query_cache_type = 0

# 만약 1 이면(0 이 기본값), 서버는 query cache 에서 캐시를 찾기 전에
# 쿼리에 모든 코멘트를 제거 한다. 
# 다중 빈칸(Multiple space), 라인 피드(line feeds), 탭(tab) 그리고
# 다른 화이트 스페이스 문자(white space characters) 등도 모두 제거 된다.
# Dynamic 설정할 수 있다. SET GLOBAL query_cache_strip_comments = OFF
query_cache_strip_comments = OFF

# query cache 를 위한 bytes 크기.
# 쿼리 캐시 구조때문에 적어도 40KB 는 필요한데, 
# 이보다 크기가 작다면 결과는 warning 이다. 
# 문장과는 달리 쿼리를 자체를 캐싱하는게 아니라 그 결과를 캐싱한다.
# 쿼리 결과를 캐슁하는 것이 때문에, INSERT, UPDATE, DELETE가 많이 일어나는 서버에는 크게 설정할 필요가 없다.
# 단위는 Byte. 초기값은 0(disable). 128MB 이상 설정하지 않는것이 좋다. 복제서버에서 Select 만할 경우 128MB 이상 설정도 가능.
# 쿼리 캐쉬는 기본적으로 병목을 동반한다. Replication 설정에서 Select 전용으로 사용되는 Slave 에서만 설정하는 것이 좋다.
# SHOW VARIABLES LIKE 'query_cache_size' 로 확인 가능.
# Dynamic 설정을 할수 있다. SET GLOBAL query_cache_size = 131072
# 기본값: 1M (>= MariaDB 10.1.7), 0 (<= MariaDB 10.1.6) 
# 유효값: 1024 단위로 0 보다 큰 값
query_cache_size = 0

# 이 값보다 큰 쿼리 결과에 대해서 query cache 에 저장하지 않는다.
# query_cache_size는 쿼리 결과 개쉬를 위한 전체 메모리 양을 말하며
# query_cache_limit 는 각 쿼리당 캐쉬할 결과의 양을 의미한다. 이 값보다 큰 쿼리 결과는 캐싱하는 않는다는 뜻.
# 단위는 Byte. 초기값은 1048576(1M).
# Dynamic 설정을 할수 있다. SET GLOBAL query_cache_limit = 131072
query_cache_limit = 0

##--------------------------------------------------------------------
# Aria
# Aria 스토리지 엔진은 PAGE 로우 포맷이다. Aria 테이블에 기본 로우 포맷인데,
# 이 엔진의 crash-safe 기능을 이용할려면 반드시 이것을 사용해야 한다.
##--------------------------------------------------------------------

# Aria 트랜젝션 로그 크기 한계
# 기본값: 1073741824 (1GB)
# Dyanmic 설정할 수 있다. SET GLOBAL aria_log_file_size = 1073741824
aria_log_file_size = 1073741824

# Aria 테이블에 인덱스 블럭에서 사용할 버퍼 크기.
# 모든 읽기와 다중 쓰기에 대해 최고의 인덱스 처리를 얻기 위해서 
# 당신이 할 중술 있는 값까지 이 값을 증가시킬 수 있다.
# Dynamic 설정할 수 없다.
# 기본값: 134217720 (128MB)
aria_pagecache_buffer_size = 134217720

# 임시 파일이 이 값보다 커질 경우 인덱스를 생성하기 위해 
# fast sort index method를 사용하지 않는다.
# Dynamic 설정할 수 있다. SET GLOBAL aria_max_sort_file_size = 9223372036853727232
# 기본값: 9223372036853727232
# 값이 엄청 크기 때문에 왠만하면 인덱스를 타게 된다.
aria_max_sort_file_size = 9223372036853727232

# CREATE INDEX 나 ALTER TABLE 를 사용해 인덱스를 생성할때, 
# REPAIR 를 수행할때, index 를 정렬할때 할당되는 버퍼
# Dynamic 설정할 수 있다. SET GLOBAL aria_sort_buffer_size = 268434432
# 기본값: 268434432 (256MB)
aria_sort_buffer_size = 268434432

# Aria 테이블을 repairing 할때에 사용할 쓰레드 갯수
# 1 은 parallel repair 를 비활성화 한다.
# 보다 빠른 repair 결과를 위해 값을 증가시킬 경우 
# 보다 많은 CPU 와 Memory 를 사용게 된다.
# Dynamic 설정할 수 있다. SET GLOBAL aria_repair_threads = 1
# 기본값: 1
aria_repair_threads = 1

# 임시 테이블에서 Aria 스토리지 엔진을 사용할지 말지 지정하기 위한 
# 읽기 전용 변수. 기본값으로 ON 으로 Aria 스토리지 엔진을 사용한다.
# 만약 OFF 를 지정하면, MariaDB 는 디스크에 임시테이블을 위해 MyISAM 을 사용한다.
# MEMORY 스토리지 엔진은 이 변수의 설정과 상관없이 임시 테이블을 위해서 사용된다.
aria_used_for_temp_tables = ON

##--------------------------------------------------------------------
# InnoDB behavior
##--------------------------------------------------------------------

# 새로운 InnoDB 테이블을 위한 파일 포맷.
# Antelope 나 기본값이며 오리지널 포맷인 압축을 지원하는 Barracuda 를 지정할 수 있다.
# 이 값은 테이블 복사를 필요로하는 ALTER TABLE 를 사용하는 테이블 재생성시에 사용될 수 있다. 
# 이 값은 앞으로 MariaDB 10.6.0 에서 제거된다.
innodb_file_format = Barracuda

# InnoDB의 백그라운드 쓰레드인 I/O 쓰레드의 읽고 쓰기 쓰레드의 갯수를 정합니다.
# innodb_read_io_threads 기본값 4
# innodb_write_io_threads 기본값 4
# Dynamic 설정을 할 수 없다.
innodb_read_io_threads = 4
innodb_write_io_threads = 4

# "SHOW TABLE STATUS", "SHOW INDEX" 메타데이터 명령문을 싱행할때
# INFORMATION_SCHEMA.STATISTICS 나 INFORMATION_SCHEMA.TABLES 에 접근할때에 InnoDB 는 통계 업데이트 합니다.
# 이 변수를 Disable 하게되면 큰 테이블이나 인덱스 스키마에 대한 접근 속도를 높일 수도 있습니다.
# 이 변수를 Enable 하면 쿼리 플랜을 개선하는 도움을 줍니다.
# 기본값: OFF (from MariaDB 10.0), ON (before MariaDB 10.0)
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_stats_on_metadata = 1
innodb_stats_on_metadata = 1

# 이 시스템 변수는 transient 통계를 위해 샘플링할 페이지 수가 결정되는 방식에 영향을 줍니다.
# MariaDB 10.0 과 이후 버전에서, 이 시스템 변수는 innodb_stats_transient_sample_pages의 사용 방법에 영향을 줍니다.
# innodb_stats_traditional이 활성화된 경우, 시스템 변수에 의해 구성된 정확한 페이지 수가 통계를 위해 샘플링됩니다.
# innodb_stats_traditional이 비활성화된 경우 통계를위해 샘플링할 페이지 수는 logarithmic algorithm 을 사용하여 계산되어지며,
# 정확한 페이지 수는 테이블 크기에따라 바뀔 수 있습니다.
# 이것은 더 큰 테이블에 더 많은 표본을 사용할 수 있음을 뜻 합니다.
# Dynamic 설정할 수 있다. SET GLOBAL innodb_stats_traditional = 1
# 기본값: ON
innodb_stats_traditional = 1

# 샘플을 위한 인덱스 페이지의 수를 결정함으로써 인덱스 배포 통계를 제어를 제공한다. 
# 높은 값은 보다 많은 disk I/O 를 만들지만, 특히 큰 테이블의 경우, 보다 정교한 통계를 
# 만들어내고 결과적으로 쿼리 옵티마이저를 좀 더 효과적으로 사용할 수 있게 된다.
# 기본값보다 낮은 값은 추천하지 않으며, 통계는 부정확해질 것이다. 
# 기본값: 8
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_stats_transient_sample_pages = 8
innodb_stats_transient_sample_pages = 8

# 버퍼풀에 최대 더티 페이지 퍼센티지.
# 기본값: 90 >= MariaDB 10.5.7, 75 <= MariaDB 10.5.6
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_max_dirty_pages_pct = 90
innodb_max_dirty_pages_pct = 90

# MariaDB 10.5 까지는 기본값 1로 InnDB hash index 활성화 된다. 
# 성능테스트에 따르면, InnoDB adaptive hash index 는 대부분 읽기 전용 워크로드에
# 도움이 되지만 다른 환경에서는, 특히 DROP TABLE, TRUNCATE TABLE, ALTER TABLE,
# DROP INDEX 연산에 성능하락을 보일 수 있다. 
# 기본값: 1
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_adaptive_hash_index = 1
innodb_adaptive_hash_index = 1

# 기본값 1 은 서버가 InnoDB 버퍼 풀에 플러시 dirty pages 의 비율을 동적으로 조정할 것이다.
# 이것은 짧은 버스트 I/O 활동을 줄이는데 도움이 된다.
# 기본값: 1
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_adaptive_flushing = 1
innodb_adaptive_flushing = 1

# 만약 1 로 설정되면, XtraDB/InnoDB 는 특정 케이스에서 경고 대신 strict SQL mode 처럼
# 에러를 리턴할 것이다.
# 기본값: ON >= MariaDB 10.2.2, OFF <= MariaDB 10.2.1
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_strict_mode = 1
innodb_strict_mode = 1

# insert buffer 와 flushing pages 로부터 merging data 를 포함한 
# XtraDB/InnoDB 백그라운드 태스크를 위한 I/O 활동 제한.
# 기본값: 200
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_io_capacity = 200
innodb_io_capacity = 200

# InnoDB redo log 를 디스크에 쓰기 위한 버퍼 크기.
# 이값을 증가시면 보다 큰 트랜잭션을 커미팅전에 필요한 
# 디스크 I/O 없이 실행할 수 있다는 것을 뜻한다.
# 기본값: 16777216 (16MB) >= MariaDB 10.1.9
# 사용가능 값: 262144 to 4294967295 (256KB to 4096MB)
# 다이나믹 설정할 수 없다. 
innodb_log_buffer_size = 16777216

# InnoDB 테이블에서 AUTO_INCREMENT 값을 생성할때 사용되어질 lock mode
# 가능한 값:
#   0: traditional lock mode
#   1: consecutive lock mode
#   2: interleved lock mode
# Galera Cluster 사용을 위해서는 lock mode 가 2여야 한다. 
# 기본값: 1
# 다이나믹 설정할 수 없다.
innodb_autoinc_lock_mode = 1

# InnoDB 버퍼링 변경을 어떻게 수행할지를 지정. 자세한 사항은
# InnoDB Change Buffering 을 참조.
# 기본값: all
# Dynamic 설정할 수 있다. SET GLOBAL innodb_change_buffering = all
innodb_change_buffering = all

##--------------------------------------------------------------------
# InnoDB base
##--------------------------------------------------------------------

# InnoDB buffer pool 바이트 크기
# 전체/주로 InnoDB 테이블을 가지는 데이터베이스 서버에서 기본값은 
# 전체 메모리에 80% 설정할 수 있다. 
# 기본값: 134217728 (128MB)
# 다이나믹 설정: Yes (>= MariaDB 10.2.2), No (<= MariaDB 10.2.1)
# SET GLOBAL innodb_buffer_pool_size = 10MB
innodb_buffer_pool_size = 1073741824

# MariaDB 10.6.0 에서 제거 됐다.
# innodb_buffer_pool_instances = 2

# shared tablespace 에 모든 InnoDB 데이터 파일을 위한 디렉토리 경로.
# 다이나믹 설정할 수 없다. 
innodb_data_home_dir = /opt/dbstorage/InnoDB/ibData

# 개별적인 InnoDB 데이터 파일과 그 크기를 지정.
# innodb_data_home_dir 의 값은 전체 디렉토리 경로를 가져 오기 위해 
# innodb_data_file_path에 지정된 각 경로에 결합된다.
# innodb_data_home_dir이 빈 문자열이면 여기에 절대 경로를 지정할 수 있다. 
# 파일 크기는 K (킬로바이트), M (메가 바이트) 및 G (기가 바이트)로 지정되며 
# 데이터 파일을 자동 확장할지 여부도 지정된다.
innodb_data_file_path = ibdata1:12M:autoextend

# 만약 ON 으로 지정하면, 새로운 InnoDB 테이블들은 그들만의 file-per-table InnoDB 테이블스페이스를 생성 한다. 
# 만약 OFF 로 지정하면, 새로운 InnoDB 테이블들은 InnoDB 시스템 테이블에 생성된다. 
# Page compression 은 오직 file-per-table 테이블스페이스에서만 활용된다.
# 이 값을 활성화하면 시스템 테이블 스페이스 대신 데이터와 인덱스를 별도의 파일에 저장한다.
# 확장자는 .ibd
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_file_per_table = 1
innodb_file_per_table = 1 

# InnoDB 시스템 테이블 파일이 꽉차면 자동으로 확장하는데, 확장하는 사이즈 크기를 지정.
# 만약 innodb_file_per_table 이 1로 지정되었다면, 이 세팅은 결과적으로 자신만의 방법으로 
# 자동적으로 확장되어지는 테이블당 테이블스페이스 파일에 적용되지 않는다. 
innodb_autoextend_increment = 128

# InnoDB 셧다운 모드
# 0 - InnoDB 는 full purge 와 change buffer merge 를 포함한 슬로우 셧다운을 수행한다. 
#     매우 느릴 수 있는데, 극단적으로 몇시간이 걸릴 수도 있다.
# 1 - 기본값으로 InnoDB 는 full purge 나 insert buffer merge 를 수행하지 않는 빠른 셧다운을 수행한다. 
# 2 - InnoDB redo log 는 플러쉬되고 쿨(cool) 셧다운이 되는데 이는 크래쉬(crash) 와 유사하다. 결과적으로 
#     시작시에 크래쉬 리커버리가 수행 된다. 
# 3 - Active 트랜잭션은 롤백 되지 않을 것이다. 하지만 모든 변화 페이지들은 데이터파일에 쓰여질 것이다. 
#     Active 트랜잭션들은 시작시 백그라운드 쓰레드에 의해서 롤백 되어질 것이다. 
# 기본값: 1
# Dynamic 설정할 수 있다. SET GLOBAL innodb_fast_shutdown = 1
innodb_fast_shutdown = 1

# InnoDB redo log 파일들의 경로. 만일 지정하지 않으면, innodb_log_files_in_group 파일들은 
# ib_logfile0 순서로 명명되고 innodb_log_file_size 지정된 크기로 데이터 디렉토리에 생성된다.
# 다이나믹 설정할 수 없다. 
innodb_log_group_home_dir = /opt/dbstorage/InnoDB/redoLogs

# MariaDB 10.6.0 에서 삭제됐다.
# innodb_log_files_in_group = 1

# 로그 그룹에서 각 InnoDB redo log 파일의 바이트 크기.
# 다 합친 크기는 512GB 를 넘을 수 없다. 아주 큰 값은 
# 체크포인트 활동에 플러싱을 줄임으로써 disk I/O 를 줄여주지만,
# 크래쉬로부터 복구할때 오래 걸린다.
# 기본값: 100663296 (96MB) (>= MariaDB 10.5), 50331648 (48MB) (<= MariaDB 10.4)
# Dynamic 설정할 수 없다.
innodb_log_file_size = 2G

# InnoDB redo log 파일들을 디스크로 쓰기위해 사용하는 버퍼 바이트 크기.
# 이것을 증가시키는 것은 아주 큰 트랜잭션을 커미팅 하기전 disk I/O 필요없이 처리할 수 있다는 뜻이다.
# 기본값: 16777216 (16MB) >= MariaDB 10.1.9, 8388608 (8MB) <= MariaDB 10.1.8
# Dynamic 설정할 수 없다.
innodb_log_buffer_size = 16777216 

# undo log를 위해 InnoDB 가 별도의 테이블스페이스 생성에 사용할 디렉토리 절대 혹은 상대 경로.
# 기본값은 NULL 인데, 경로를 지정하지 않으면, undo 테이블스페이스는 datadir 에 정의한 
# 디렉토리에 생성될 것이다. innodb_undo_logs 와 innodb_undo_tablespaces 를 함께 사용하라.
# Undo 로그들은 별도의 스토리지 장치에 위치하는 것이 매우 유용하다.
# 기본값: NULL
# Dynamic 설정할 수 없다.
innodb_undo_directory = /opt/dbstorage/InnoDB/undoLogs

# MariaDB 10.6.0 에서 삭제 됐다.
# innodb_undo_logs = 128

# undo 로그를 나누기 하는데 사용할 테이블스페이스 파일의 수. 기본적으로 undo 로그들은 
# innodb_undo_tablespaces 세팅보다 많은 undo 테이블스페이스를 포한하는 시스템 테이블스페이스의
# 일부다. undo 로그가 아주 커지게 되면, 하나의 테이블스페이스 크기를 줄이기 위해서 
# 여러 테이블스페이스로 분리 한다. 반드시 InnoDB가 초기화 되기전에 지정되어야 하며 
# 그렇지 않으면 MariaDB 는 시작이 실패할 것이며 "InnoDB did not find the expected number of undo tablespaces"
# 에러메시지를 보여줄 것이다. 파일은 innodb_undo_directory 에서 지정한 디렉토리에 
# 생성되며 이름은 undoN 이며 N은 정수다. undo 테이블스페이스의 크기는 10MB 이다.
#innodb_undo_tablespaces = 95

# 임시 non-tablespace 파일들 위한 경로. 지정하지 않으면(기본값), 파일들은 
# tmpdir 위치에 생성 될 것이다. 
# 기본값: 없음.
# Dynamic 설정할 수 있다. SET GLOBAL innodb_tmpdir = /opt/dbstorage/InnoDB/tmp
innodb_tmpdir = /opt/dbstorage/InnoDB/tmp

# MariaDB 10.6.0 에서 삭제 됐다.
# innodb_thread_concurrency = 0

# InnoDB transaction 이 row lock 에 대해서 
# ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction 에러와 함께
# 포기하전에 기다리는 시간.
# 이 일이 발생하면 statement 는 롤백 된다. innodb_rollback_on_timeout 옵션을 사용한다면 
# 전체 트랜잭션이 롤백 될 수 있다. 데이터 웨어하우스 애플리케이션이나 오랜 시간 실행되는
# 연산이 필요한 경우 이값을 증가시키는 것이 일반적이다. OLTP 나 interactive 애플리케이션
# 은 이 값을 줄이는게 일반적이다. 이 세팅은 deadlock 에 영향을 주지 않는다. 
# 기본값: 50
# Dynamic 설정할 수 있다. SET GLOBAL innodb_lock_wait_timeout = 50
innodb_lock_wait_timeout = 60

# 최고수준의 fault tolerance 를 위해 sync_binlog=1 과 함께 1 로 지정.
# 1: 기본값. 로그 버퍼는 InnoDB redo log 파일에 쓰여지고 각 트랜잭션 이후에 디스크에 플러쉬가 수행 된다.
#     이것은 full ACID 준수를 위해 필요하다.
# 0: commit 에 대해서 아무것도 하지 않는다. log buffer 에 쓰지 않고 매순간 InnoDB redo log 에 플러쉬 된다.
#    이것은 최고의 성능을 제공하지만 서버가 크래쉬 되면 마지막 트랜잭션은 손실될 수 있다.
# 2: 로그 버퍼는 각 커밋 이후에 InnoDB redo log 에 쓰여지지만 플러쉬는 매순간 일어난다. 
#    성능은 좀 더 낫지만, OS 나 파워가 나가면 마지막 트랜잭션은 손실 될 수 있다. 
# 3: MaraiDB 5.5 group commit 을 에뮬레이트 한다. 
# 기본값: 1
# Dynamic 설정할 수 있다. SET GLOBAL innodb_flush_log_at_trx_commit = 2
# 일반적으로 2로 설정해서 많이 쓴다.
innodb_flush_log_at_trx_commit = 2

# XtraDB/InnoDB 크래쉬 복구 모드. 0 은 기본값이다. 
# 다른 모드는 오직 recovery 목적을 위한 것이며 다른 모드가 활성화 된 동안 데이터는 변경되지 않는다.
# 보다 자세한 사항은 XtraDB/InnoDB Recovery Modes 를 보라.
# 기본값: 0
# Range: 0 ~ 6
# Dynamic 설정할 수 없다. 
innodb_force_recovery = 0

# InnoDB 플러시 방법. 유닉스에서 MariaDB 10.6.0 이전에는 기본적으로 fsync() 로 데이터와 로그를 플러시 위해 
# 사용됐다. 이 값을 조정하면 성능 향상을 가지고 올 수 있지만, 동작은 파일시스템마다 크게 다르며 기본값을 
# 변경하면 특정 상황에서 문제가 발생할 수 있으므로 신중하게 테스트하고 벤치마크해야 한다. 
# fsync 는 운영체제에게 flush 를 위임하는 것과 같다. Unix 의 메모리 캐쉬를 사용한다. 
# direct 는 운영체제에게 flush 를 위임하는 하지 않고 직접 제어하는 것과 같다. 
# MySQL 메뉴얼에서는 그래서 "디스크 쓰기를 할때에 운영체제에 버퍼운영을 무엇으로 할지 결정" 한다고
# 기술되어 있다. 
# 기본값: O_DIRECT (Unix,> = MariaDB 10.6.0 ), fsync(Unix,> = MariaDB 10.3.7 , <= MariaDB 10.5 )
# Dynamic 설정할 수 없다. 
innodb_flush_method = O_DIRECT

# 이 기능을 켜면 InnoDB는 데이터를 두번 저장함. 첫째로 doublewrite buffer,
# 두번째에 실제로 data files 쓴다.
# 기본값 1
# Dynamic 설정을 할 수 없다.
innodb_doublewrite = 1

# 쓰레드가 서스펜드되기전에 InnoDB 뮤텍스가 해제되기어질때까지 쓰레드가 기다리는 시간.
# 기본값 30
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_sync_spin_loops = 20
innodb_sync_spin_loops = 20

# autocmmit = 0 일 경우 InnoDB 는 "LOCK TABLES"를 존중한다.
# 만약 이 값을 활성화하면 autocmmit =0 인 상태에서 "LOCK TABLES" 명령어는
# 내부적으로 InnoDB는 테이블을 락(lock) 한다.
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_table_locks = 1
innodb_table_locks = 1

# MariaDB 10.6.0 에서 삭제 됐다.
# innodb_thread_sleep_delay = 1000

# purge 연산이 바쁜 서버에서 지연될때에 이 세팅이 도움이 된다.
# 기본값은 0, 지연없음. 이 값은 시스템이 지연될때에 INSERT, UPDATE, DELETE 에 대한 
# 지연 시간을 계산하는데 사용된다. InnoDB 는 UPDATE 와 DELETE statement 으로 인해 
# delete-marked index 레코드를 가진 트랜잭션 리스트를 유지한다. 
# 기본값은 0, 단위는 numeric 이다.
# Dynamic 설정을 할수 있다. SET GLOBAL innodb_max_purge_lag = 10000
innodb_max_purge_lag = 0

# MariaDB 10.6.0 에서 삭제 됐다.
#innodb_commit_concurrency = 0

# MariaDB 10.6.0 에서 삭제 됐다.
#innodb_concurrency_tickets = 0

##--------------------------------------------------------------------
# Options read by mysql. Available starting with MariaDB 10.4.6.
##--------------------------------------------------------------------
[mariadb-client]

# mysql 에서 사용할 기본 언어셋 지정.default-character-set = utf8
default-character-set = utf8

# MySQL 에서도 리눅스의 명령해완성기능, 즉 탭을 누르면 명령형이 완성는 기능, 을 지원합니다. 명령행뿐만 아니라 칼럼명, 테이블 이름, 데이터베이스명등도 완성시켜줍니다.
# 문제는 이러한 기능을 하기위해서는 각종 정보를 모두 읽고 분석해 메모리에 적해놔야 합니다.
# 필요한 기능하긴 하지만 대용량을 운영할 경우 사용하지 않는게 좋습니다.
no-auto-rehash

# MySQL 에서 경고(Warning)가 발생하면 표시는 하지 않지만 결과값으로 있다없다정도만 보여주고, "SHOW WARNINGS;"를 이용해서 봐야 합니다.
# 그러지 말고 경고가 발생하면 그냥 표시하도록 설정을 해줍니다.
show-warnings

# MySQL 클라이언트의 프롬프트를 바꿉니다.
prompt=\u@\h:\d\_\R:\m:\\s>

# paging 기능을 지원합니다.
pager="less -n -i -F -X -E"

##--------------------------------------------------------------------
# Options read by mysqldump. Available starting with MariaDB 10.4.6.
##--------------------------------------------------------------------
[mariadb-dump]

# 테이블을 덤프할때에는 MySQL 서버는 메모리 버퍼링을 사용합니다. 하지만 큰 테이블을 덤프할때에 메모리 버퍼링을 사용하면 문제가 될 수 있습니다.
# 이 메모리 버퍼링을 끄기 위해서 다음과 같이 합니다.
# 기본은 메모리 버퍼링 사용하기 입니다.
quick

# 서버와 클라이언트간 통신에 사용할 최대 버퍼 사이즈.
# 기본값 1GB
max_allowed_packet = 1G
