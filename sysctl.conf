###
########### GENERAL SYSTEM SECURITY OPTIONS ###########
###

#더 많은 PID를 허용. 32bit 플랫폼에서는 32768 이 최고 값이다. 64bit 플랫폼에서는 2^22 까지 큰 값을 지정할 수 있다. 
#(대략 PID_MAX_LIMIT 는 4 억개다)
#
#대부분 다음과 같은 값을 디폴트처럼 많이 사용한다.
kernel.pid_max = 65536

# 이것은 파일이 모든 프로세스들에 대해서 시스템 전역으로 열린 파일 개수 제한을 정의한다. 만일 여러분이 커널로그에서
# “VFS: file-max limit <number> reached.” 와같은 에러메시지를 받는다면 <number> 에 도달한 것이다. 
# 만일 /proc/sys/fs/file-max 가 증가하는데 /proc/sys/fs/inode-max 는 /proc/sys/fs/file-max 새로운 값의 3~4배로 
# 증가하지 않으면 inode가 부족해진다.
fs.file-max = 181916

## shared memory setting ##
# 프로세스간, 쓰레드간의 데이터 공유를 위해서 사용되어지는 것이 공유메모리라는 공간이다. 이 공유 메모리 공간에서 프로세스간, 
# 쓰레드간에 데이터를 주고받는 방법은 다양한데, 대표적인 것이 메시지 큐(message queue) 방법이다.
#
# 메시지 큐는 하나하나가 배열 형태이고 각각 하나하나를 아이템으로도 볼수 있다. 메시지 큐의 크기는 담을 수있는 아이템 수를 가리킨다.
#
# 메시지큐는 커널에서 전역적으로 관리되며(이를테면 커널 전역변수형태로), 모든 프로세스에서 접근가능하도록 되어있으므로, 
# 하나의 메시지큐 서버가 커널에 요청해서 메시지큐를 작성하게 되면, 메시지큐의 접근자(식별자)를 아는 모든 프로세서는 
# 동일한 메시지큐에 접근함으로써, 데이타를 공유할수 있게 된다.
#
# 단, 전체 시스템에서 사용할수 있는 메시지큐의 수와 크기에 제한되어 있는데 이것을 제어하는 것이 다음의 파라메터들이다.

# 하나의 프로세스에서 다른 프로세스로 보내질 수 있는 최대 메시지 크기. 
# 기본값은 65536 이다. 이 값은 큐의 크기(msgmnb)를 초과할 수 없다.
kernel.msgmax = 65536

# 메시지 크기로 바이트 단위.
# 기본값은 65536 이다.
kernel.msgmnb = 65536

# 최대 메시지 큐 식별자의 수.
# 기본값 3627 이다.
#
# 메시지 큐 식별자를 알게되면 그 메시지 큐를 사용할 수 있다.
kernel.msgmni = 3627

###
########### IMPROVE SYSTEM MEMORY MANAGEMENT ###########
###

# Linux RAM is composed of chunks of memory called pages, Swapiness 0부터 100 사이의 값이다. 
# 운영체제 시스템은 메모리에 오랫동안 사용하지 않는 페이지(page)들을 swap memeory 로 내려놓는다. 
# 이를 위해서는 운영체제 시스템이 메모리를 자주 살펴봐야하고 페이지가 오래됐는지 않됐는지도 봐야한다. 
# Swappiness 이 100 에 가깝다는 건 운영체제 시스템이 평소에도 자주자주 스왑(swap)을 하라는 뜻이다. 
# 이것은 메모리에서 오랫된 페이지가 아닌 조금만 메모리의 페이지를 사용하지 않으면 바로 스왑될수 있다는 것이다. 
# 비록 스왑이 별도의 자원을 제공하지만, RAM 은 스왑 공간보다 훨씬 빠르다. 매시간 무엇인가가 RAM 에서 SWAP 으로 이동되어지고 느려질 것이다. 
# swappiness 값이 0에 가갑다는 건 운영체제가 절대적인 스왑이 필요할때에라야만 RAM 에서 SWAP 으로 이동시키게 된다.
vm.swappiness = 10

# 메모리의 dirty page 의 비율을 말하는데, 메모리에서 dirty page란 디스크에 쓰기를 해야할 내용을 메모리에 캐쉬된 것을 말한다. 
# 서버 애플리케이션에서 쓰기작업은 OS 에 요청을 함으로 발생하는데 요청을 받은 OS 는 즉각 데이터를 Disk 에 쓰지않고 메모리에 
# 가지고 있으면서 서버 애플리케이션에게는 '디스크에 썼음' 이라고 알린다. 바로 이러한 데이터, 디스크에 써야할 데이터를 dirty page 라고 부른다. 
# dirty_ratio 는 전체 메모리의 비율로 정하게된다. 정해진 비율에 dirty page 양이 도달하면 실제 디스크 쓰기작업을 하게된다. 
# 기본값은 20% 이다. 문제는 쓰기 작업을 프로세스가 한다.
vm.dirty_ratio = 20

# kernel flusher threads(pdflush) 가 수행해야할 dirty page 양. 전체 메모리의 비율로 정한다. 정해진 비율에 dirty page 양이 도달하면 
# 실제 디스크 쓰기작업을 하게된다. 기본값은 10% 이다.
vm.dirty_background_ratio = 2

# dirty page는 dirty_background_ratio 임계비율과는 별개로 dirty_expire_centisecs 값에 의해 생성된지 30000 millisecond(30초)이 
# 지나게 되면 Disk 영역으로 동기화 처리 된다.
vm.dirty_expire_centisecs = 30000

# 리눅스 머신은 물리메모리를 가상메모리 체계로 관리한다. 서버 애플리케이션은 물리메로리 대신에 가상메모리를 보게 된다. 
# 리눅스는 가상메모리 체계를 실제 메모리에 저장하기위한 매핑작업을 하는데, 그것이바로 mmap 이다. 
# from user space, you can't access it directly. suppose your driver or kernel modules want to access that pysical address, 
# this is the best way. usually memory mapped device drivers uses this function to map registers to virtual memory. 
# 프로스세가 mmap 이 가능하게 하기 위한 최소한의 가상 주소.
# 
# 이 값은 커널 null dereference 버그 와도 관련이 있다. 기본값은 0인데, 이럴경우 null dereference 관련 버그로부터 보호받을 수 없다. 
# 이 값을 64k 로 설정하면 대다수의 응용 프로그램이 정상적으로 작동함과 동시에 미래의 잠재적 커널 버그를 예방할 수도 있다.
vm.mmap_min_addr = 65536

# No overcommitment of available memory 
# overcommit_memory 의 값은 0, 1, 2 중에 하나를 가지며 기본값은 0 이다. 
# 리눅스 애플리케이션은 실제로 필요한 메모리보다 더 많이 할당하는데, 거기에서 많은 부분은 사용되지 않는다. 
# 0 (heuristic overcommit) userspace 가 더 많은 메모리를 요구할때에 남아있는 메모리양의 측정을 시도한다. 
# 1 (always overcommit) 커널은 항상 충분한 메모리가 있다고 시치미를 뗀다. 
# 2 (strict overcommit) 절대 오버커밋 할 수 없다. 커널은 오버커밋 메모리를 차단한다.
vm.overcommit_memory = 0

# overcommit_memory 가 2일 경우에 영향을 미친다. 기본적으로 100 으로 설정하면 리눅스가 가진 메모리 (memory + swap) 보다 
# 더 큰 메모리를 할당할 수 없다. 100보다 적은 수치는 애플리케이션이 리눅스의 메모리를 다 사용하지 못하다는 뜻이여서 사용해서는 안된다. 
# 예를들어 80으로 설정했다면 리눅스의 전체 메모리(memory+swap) 중에 80% 만 사용하라는 뜻이므로 20%는 사용하지 못하게 되어 낭비가 된다.
vm.overcommit_ratio = 100

# 공유 메모리라는 말은 유닉스 커널에서 메모리 관리 형태를 설명하는 말이다. 메모리 영역은 서로 다른 프로세스들사이에 공유될 수 있다. 
# 공유 메모리 모델 사용은, 메모리 복사를 중복해서 생성하는 것을 방지한다. 그래서 프로그램들은 데이터 공유를 쉽게할 수 있다. 
# 이러한 메모리 영역에서 누구는 접근할 수 있고 누구는 못하게하는 제어를 가질 필요성이 있게 된다. 락킹(Locking) 메커니즘이 필요하다. 
# 이것은 세마포어를 운영함으로써 얻을 수 있다. 기본적으로, 플래그(Flag)는 온(on) 이거나 오프(off)다. 만약 메모리가 사용되어질 수 있다면 
# 프로세스는 플래그를 온(on)하고 다른 프로세스들은 세마포어가 free 되거나 플래그가 오프(off) 될때까지 기다려야 한다. 
# 그래서 공유 메로리는 세마포어가 필요하고 그들은 손에서 손으로 전달한다.(?) 애플리케이션들은 POSIX C 루틴 셋(set)을 통해서 프로그램적으로 
# 공유 메모리에 접근할 수 있다. IPC 나 공유 메모리 API들은 shmget() 과 shmat()로 불리우는 IPC 콜을 가지고 있으며 프로그래머가 이를 이용해 
# 공유 메모리 세그먼트를 획득하거나 세그먼트를 붙일 수 있다. SHMMAX 는 진짜 그냥 단일 공유 메모리 세그먼트의 최대 크기 이다. 
# 이 크기는 byte로 표현된다. SHMALL 은 전체시스템에서 모든 공유 메모리 세그먼트의 총양이다. 이는 페이지로 측정된다.
#
# 64bit 에서는 68719476736, 32bit 에서는 4294967295가 기본값이다.
# 요약하면 하나의 프로세스가 가질 수 있는 공유메모리 최대값이며 보통은 대략 256MB 를 지정한다.
kernel.shmmax = 268435456

# 시스템 전체적으로 사용할 수 있는 공유메모리 페이지(page) 의 총 양. shmax/PAGE_SIZE 보다 클수 없다. 64bit 에서는 4294967296, 32bit 에서는 268435456가 기본값이다.
kernel.shmall = 2097152

# Keep at least 64MB of free RAM space available
vm.min_free_kbytes = 65536

###
########### GENERNAL NETWORK SECURITY ###########
###

#SYN attack 차단, SYNcookies 활성화 (max_syn_backlog 가 가득차면 동작한다)
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
# backlog size
net.ipv4.tcp_max_syn_backlog = 4096

# 패킷 포워딩 비활성화. NAT, Router 로 동작한다면 활성화해야 한다.
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# IP 소스 라우팅 비활성화
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# IP 스푸핑 공격 방지.
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# 변조 패킷 ICMP Redirect 차단
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# Bootp 패킷 허용 않함.
net.ipv4.conf.all.bootp_relay = 0

# Arp Porxy 금지.
net.ipv4.conf.all.proxy_arp = 0

# 보통 TCP 시간을 못보도록 차단하지만, TCP 충돌흐름제어에 아주 중요하게 사용되지기 때문에 반드시 활성해야 한다.
net.ipv4.tcp_timestamps = 1

# ICMP 핑 차단. 이걸 금지하면 ping 명령이 안듣는다.
net.ipv4.icmp_echo_ignore_all = 1

# ICMP echo 브로드캐스 무시 활성화.
net.ipv4.icmp_echo_ignore_broadcasts = 1

# IP나 TCP 헤더가 깨진 icmp 패킷 무시
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Enable a fix for RFC1337 - time-wait assassination hazards in TCP
net.ipv4.tcp_rfc1337 = 1

###
########### TUNNING NETWORK PERFORMACE ###########
###

# 연결을 종료시 소요되는 시간을 줄여준다(기본 설정값: 60).
net.ipv4.tcp_fin_timeout = 7

# Decrease the time default value for connections to keep alive
net.ipv4.tcp_keepalive_time = 300 # tcp keeap alive time. 기본 2시간.
net.ipv4.tcp_keepalive_probes = 5 # 연결이 끊어졌다고 판단할 때까지, 얼마나 keepalive probe 를 보낼지 결정.
net.ipv4.tcp_keepalive_intvl = 15 # keepalive_probes 를 보낼 간격을 정함. 값은 초단위.

# 커널 3.12 이상 부터 지원. Heavy TCP 에 유용.
net.core.default_qdisc = fq

# tcp_window_scaling 사용
net.ipv4.tcp_window_scaling = 1

## 아래 설정은 매우 바쁜 서버들에게는 충분히 큰 값이다.
## 각각의 메모리 설정값은 상호 의존적이라 함부로 바꿔서는 안된다.
## 

# TCP Layer 수신 버퍼 값.
net.ipv4.tcp_rmem = 8192 87380 16777216
net.ipv4.udp_rmem_min = 16384
net.core.rmem_default = 262144
net.core.rmem_max = 16777216

# TCP Layer 송신 버퍼 값
net.ipv4.tcp_wmem = 8192 65536 16777216
net.ipv4.udp_wmem_min = 16384
net.core.wmem_default = 262144
net.core.wmem_max = 16777216

# 최대 허용할 접속수 
net.core.somaxconn = 32768

# 들어오는 접속들에 대한 Backlog 
net.core.netdev_max_backlog = 16384
net.core.dev_weight = 64

# Increase the maximum amount of option memory buffers
net.core.optmem_max = 65535

# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
net.ipv4.tcp_max_tw_buckets = 1440000

# try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1

# Limit number of orphans, each orphan can eat up to 16M (max wmem) of unswappable memory
net.ipv4.tcp_max_orphans = 16384
net.ipv4.tcp_orphan_retries = 0

# Increase the maximum memory used to reassemble IP fragments
net.ipv4.ipfrag_high_thresh = 512000
net.ipv4.ipfrag_low_thresh = 446464
